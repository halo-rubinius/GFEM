#pragma once
#include <functional>
#include <iostream>
#include <vector>

namespace GFEM
{

    /**
     * @brief 数值积分求积器
     * 默认为一维积分
     */
    class Quadrature
    {
    protected:
        int order;                                // 积分点的数量
        std::vector<std::vector<double>> points;  // 积分点
        std::vector<double> weights;              // 权重

    public:
        Quadrature() = default;

        /**
         * @brief 构造函数
         * @param n 需要的积分点的数量
         */
        Quadrature(int n) : order(n)
        {
            generateGaussQuadrature();
        }

        /**
         * @brief 获取所有的积分点
         * @return 所有积分点的的引用
         */
        const std::vector<std::vector<double>> &getAllPoints() const
        {
            return points;
        }

        /**
         * @brief 获取所有的积分权重
         * @return 所有的积分权重的引用
         */
        const std::vector<double> &getAllWeights() const
        {
            return weights;
        }

        /**
         * @brief 获取指定索引的积分点
         * @param index 指定的索引
         * @return 指定索引的积分点
         */
        const std::vector<double> &getPoint(int index) const
        {
            return points[index];
        }

        /**
         * @brief 获取指定索引的积分权重
         * @param index 指定的索引
         * @return 指定索引的积分权重
         */
        double getWeight(int index) const
        {
            return weights[index];
        }

        /**
         * @brief 获取求积器中积分点的数量
         * @return 求积器中积分点的数量
         */
        size_t getNumOfPoints() const
        {
            return weights.size();
        }

        /**
         * @brief 对指定函数进行数值求积
         * @param integrand 被积函数
         * @return 求积结果
         */
        double integrate(
            std::function<double(const std::vector<double> &)> integrand)
        {
            double result = 0.0;
            for (int i = 0; i < weights.size(); i++)
            {
                result += weights[i] * integrand(points[i]);
            }
            return result;
        }

        /**
         * @brief 输出积分点和权重信息
         */
        void print() const
        {
            std::cout << "Quadrature points and weights:" << std::endl;
            for (int i = 0; i < points.size(); i++)
            {
                for (int j = 0; j < points[i].size(); j++)
                {
                    std::cout << points[i][j] << " ";
                }
                std::cout << weights[i] << std::endl;
            }
        }

    private:
        // 生成高斯积分规则
        void generateGaussQuadrature()
        {
            // 一维高斯积分的默认规则
            if (order == 2)
            {
                // 2 点高斯积分
                points = {{-0.5773502691896257}, {0.5773502691896257}};
                weights = {1.0, 1.0};
            }
            else if (order == 3)
            {
                // 3 点高斯积分
                points = {{-0.7745966692414834}, {0.0}, {0.7745966692414834}};
                weights = {0.5555555555555556, 0.8888888888888888,
                           0.5555555555555556};
            }
            else if (order == 4)
            {
                // 4 点高斯积分
                points = {{-0.8611363115940526},
                          {-0.3399810435848563},
                          {0.3399810435848563},
                          {0.8611363115940526}};
                weights = {0.3478548451374538, 0.6521451548625461,
                           0.6521451548625461, 0.3478548451374538};
            }
            else if (order == 5)
            {
                // 5 点高斯积分
                points = {{-0.9061798459386640},
                          {-0.5384693101056831},
                          {0.0},
                          {0.5384693101056831},
                          {0.9061798459386640}};
                weights = {0.2369268850561891, 0.4786286704993665,
                           0.5688888888888889, 0.4786286704993665,
                           0.2369268850561891};
            }
            else if (order == 6)
            {
                // 6 点高斯积分
                points = {{-0.9324695142031521}, {-0.6612093864662645},
                          {-0.2386191860831969}, {0.2386191860831969},
                          {0.6612093864662645},  {0.9324695142031521}};
                weights = {0.1713244923791704, 0.3607615730481386,
                           0.4679139345726910, 0.4679139345726910,
                           0.3607615730481386, 0.1713244923791704};
            }
            else if (order == 7)
            {
                // 7 点高斯积分
                points = {{-0.9491079123427585}, {-0.7415311855993945},
                          {-0.4058451513773972}, {0.0},
                          {0.4058451513773972},  {0.7415311855993945},
                          {0.9491079123427585}};
                weights = {0.1294849661688697, 0.2797053914892766,
                           0.3818300505051189, 0.4179591836734694,
                           0.3818300505051189, 0.2797053914892766,
                           0.1294849661688697};
            }
            else if (order == 8)
            {
                // 8 点高斯积分
                points = {{-0.9602898564975363}, {-0.7966664774136267},
                          {-0.5255324099163290}, {-0.1834346424956498},
                          {0.1834346424956498},  {0.5255324099163290},
                          {0.7966664774136267},  {0.9602898564975363}};
                weights = {0.1012285362903763, 0.2223810344533745,
                           0.3137066458778873, 0.3626837833783620,
                           0.3626837833783620, 0.3137066458778873,
                           0.2223810344533745, 0.1012285362903763};
            }
            else if (order == 9)
            {
                // 9 点高斯积分
                points = {{-0.9681602395076261},
                          {-0.8360311073266358},
                          {-0.6133714327005904},
                          {-0.3242534234038089},
                          {0.0},
                          {0.3242534234038089},
                          {0.6133714327005904},
                          {0.8360311073266358},
                          {0.9681602395076261}};
                weights = {
                    0.0812743883615744, 0.1806481606948574, 0.2606106964029354,
                    0.3123470770400029, 0.3302393550012598, 0.3123470770400029,
                    0.2606106964029354, 0.1806481606948574, 0.0812743883615744};
            }
            else if (order == 10)
            {
                // 10 点高斯积分
                points = {{-0.9739065285171717}, {-0.8650633666889845},
                          {-0.6794095682990244}, {-0.4333953941292472},
                          {-0.1488743389816312}, {0.1488743389816312},
                          {0.4333953941292472},  {0.6794095682990244},
                          {0.8650633666889845},  {0.9739065285171717}};
                weights = {0.0666713443086881, 0.1494513491505806,
                           0.2190863625159820, 0.2692667193099963,
                           0.2955242247147529, 0.2955242247147529,
                           0.2692667193099963, 0.2190863625159820,
                           0.1494513491505806, 0.0666713443086881};
            }
            else
            {
                std::cerr << "Unsupported quadrature order!" << std::endl;
            }
        }
    };

}  // namespace GFEM
